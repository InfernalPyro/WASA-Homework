openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
    upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0
servers:
  - url: http://localhost:3000

tags:
  - name: "Login"
    description: Endpoint for Login operation
  - name: "User"
    description: Endpoint for Account operations
  - name: "Profile"
    description: Endpoint to Manage the logged user's profile and their photos
  - name: "User operations"
    description: Endpoint for operations about other users 
  - name: "Photo"
    description: Endpoint for other users photo

  
paths:
  /session:
    post:
      tags: ["Login"]
      operationId: doLogin
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: User details
        content:
          application/json:
              schema:
                description: username of the logging user #test 22/12
                type: object
                properties:
                  username:
                    description: username of the logging user
                    type: string
                    example: Maria
                    minLength: 3
                    maxLength: 16
                    pattern: "^[a-zA-Z0-9 ]*$"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: id of the logging user #test 22/12
                type: object
                properties:
                  identifier:
                    type: integer
                    description: id of the logging user
                    example: 10  

  /user/{userId}/profile: 
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      tags: ["User"]
      summary: Get user profile 
      operationId: getUserProfile
      description: |-
        Returns the profile of the user with specified Id.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid username supplied
        '404':
          description: User not found


  /user/{userId}/home:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      tags: ["User"]
      summary: Get stream
      operationId: getMyStream
      description: |-
        Gets a stream of photos (images) in reverse chronological 
        order, with information about when each photo was uploaded 
        (date and time) and how many likes and comments it has.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'          
        '401':
          description: User is not logged
        '404':
          description: User not found
      security:
        - Authentication: []


  /user/{userId}/username:
    parameters:
      - $ref: "#/components/parameters/UserId"
    patch:       
      tags: ["Profile"]
      operationId: setMyUserName
      summary: Update user Username
      description: |-
        A logged user can change their username if logged
      requestBody:
        description: New username
        content:
          application/json:
            schema:
                type: object
                description: schema that contains the new username #test
                properties:
                  username:
                    description: The new username
                    type: string
                    minLength : 3
                    maxLength : 15
                    example: MyName
                    pattern: "^[a-zA-Z0-9 ]*$"
        required: true
      responses:
        '204':
          description: Username updated
        '401':
          description: User is not logged
        '400':
          description: New Username not valid 
        '406':
          description: New Username already in use
        '404':
          description: User not found
      security:
        - Authentication: []


  /user/{userId}/photo/:
    parameters:
      - $ref: "#/components/parameters/UserId"
    post:       
      tags: ["Profile"]
      operationId: uploadPhoto
      summary: Upload a new photo
      description: |-
        A logged user can upload a photo in their profile
      requestBody:
        description: Photo to upload
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Photo'
      responses:
        '201':
          description: Photo uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '401':
          description: User is not logged 
        '400':
          description: Photo cannot be uploaded
        '404':
          description: User not found
      security:
        - Authentication: []

  /user/{userId}/photo/{photoId}:
    parameters:
      - $ref: "#/components/parameters/UserId"
    delete:       
      tags: ["Profile"]
      operationId: deletePhoto
      summary: Delete a photo
      description: |-
        A logged user can delete a photo they posted before
      parameters:
        - name: photoId
          in: path
          description: Id of the photo to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 5
            
      responses:
        '204':
          description: Photo deleted
        '401':
          description: User is not logged  
        '404':
          description: User or Photo not found
      security:
        - Authentication: []

    

  /user/{userId}/follow/{followId}:  
    parameters:
      - $ref: "#/components/parameters/UserId"

    put:
      tags: ["User operations"]
      operationId: followUser
      summary: Follow another user
      description: |-
        An user can follow another user while on their profile page
      parameters: 
        - in: path
          name: followId
          required: true
          schema:
            type: integer
            format: int64
          description: The user to follow ID's
      responses:
        '204':
          description: User added to follow list
          #content:
          #  application/json:
          #    schema:
          #      $ref: '#/components/schemas/User'
        '400':
          description: Trying to follow someone that banned you
        '401':
          description: User is not logged  
        '404':
          description: User not found
      security:
        - Authentication: []

    delete:
      tags: ["User operations"]
      operationId: unfollowUser
      summary: Unfollow another user
      description: |-
           An user can unfollow another user
      parameters: 
        - in: path
          name: followId 
          required: true
          schema:
            type: integer
            format: int64
          description: The user to unfollow Id
      responses:
        '204':
          description: User removed from follow list
        '401':
          description: User is not logged  
        '404':
          description: User not found
      security:
        - Authentication: []
    

  /user/{userId}/ban/{banId}:      
    parameters:
      - $ref: "#/components/parameters/UserId"

    put:
      tags: ["User operations"]
      operationId: banUser
      summary: Ban another user
      description: |-
        An user can ban another user, blocking them from seeing their profile
      parameters: 
        - in: path
          name: banId 
          required: true
          schema:
            type: integer
            format: int64
          description: The user to ban Id
      responses:
        '204':
          description: User added to banned list
          #content:
          #  application/json:
          #    schema:
          #      $ref: '#/components/schemas/User'
        '401':
          description: User is not logged  
        '404':
          description: User not found
      security:
        - Authentication: []

    delete:
      tags: ["User operations"]
      operationId: unbanUser
      summary: Unban another user
      description: |-
           An user can unban another user
      parameters: 
          - in: path
            name: banId
            required: true
            schema:
              type: integer
              format: int64
            description: The user to unban Id
      responses:
        '204':
          description: User removed from banned list
        '401':
          description: User is not logged  
        '404':
          description: User not found
      security:
        - Authentication: []

    

  /profile/{profileId}/photo/{photoId}/likes/{userId}:
    parameters:
      - in: path
        name: profileId
        required: true
        schema:
          type: integer
          format: int64
        description: Id of the owner of the photo
      
      - $ref: "#/components/parameters/UserId"

    put:
      tags: ["Photo"]
      operationId: likePhoto
      summary: Like a photo
      description: |-
        An user can like a photo uploaded by anyone
      parameters: 
        - in: path
          name: photoId
          required: true
          schema:
            type: integer
            format: int64
          description: The photo to like Id's
        
      responses:
        '204':
          description: Photo liked
        '401':
          description: User is not logged 
        '404':
          description: User or Photo not found
      security:
        - Authentication: []

    delete:
      tags: ["Photo"]
      operationId: unlikePhoto
      summary: Unlike a photo
      description: |-
           An user can unlike any photo they liked before
      parameters: 
        - in: path
          name: photoId 
          required: true
          schema:
            type: integer
            format: int64
          description: The photo to unlike Id's
          
      responses:
        '204':
          description: Photo Unliked
        '401':
          description: User is not logged 
        '404':
          description: User or Photo not found
      security:
        - Authentication: []

  /profile/{profileId}/photo/{photoId}/comments/:      

    post:
      tags: ["Photo"]
      operationId: commentPhoto
      summary: Comment a photo
      description: |-
        An user can make a comment on any photo
      parameters: 
        - in: path
          name: profileId
          required: true
          schema:
            type: integer
            format: int64
          description: Id of the owner of the photo

        - in: path
          name: photoId
          required: true
          schema:
            type: integer
            format: int64
          description: The photo to comment Id's

      requestBody:
        description: Add a comment to the photo comments list
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added to photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: User is not logged
        '404':
          description: User or Photo not found
      security:
        - Authentication: []

  /profile/{profileId}/photo/{photoId}/comments/{commentId}: 

    delete:
      tags: ["Photo"]
      operationId: uncommentPhoto
      summary: Delete a comment
      description: |-
           An user can delete any comments they made
      parameters:   
          - in: path
            name: profileId
            required: true
            schema:
              type: integer
              format: int64
            description: Id of the owner of the photo

          - in: path
            name: photoId
            required: true
            schema:
              type: integer
              format: int64
            description: The photo with the comment Id's    

          - in: path   
            name: commentId 
            required: true
            schema:
              type: integer
              format: int64
            description: The comment to delete Id's
          
      responses:
        '204':
          description: Comment deleted
        '401':
          description: User is not logged
        '404':
          description: User, Comment or Photo not found
      security:
        - Authentication: []
      


components:
  parameters: 
    UserId:
      schema:
        type: integer
        format: int64
        example: 10
      name: userId
      in: path
      description: The id of the logged user
      required: true
      

  schemas:
    User:
      description: A single user of the platform
      type: object
      properties:
        userId:
          description: The user's id 
          type: integer
          format: int64
          example: 10
        
        username:
          description: The user's username
          type: string
          minLength : 3
          maxLength : 15
          example: MyName
          pattern: "^[a-zA-Z0-9 ]*$"
        
        follows: 
          description: List of ids of every user that follows this user
          type: array
          minItems : 0
          maxItems : 1000
          items: 
            type: integer
          example: 
            -  11
            -  12

        followers: 
          description: List of ids of every user that this user follows
          type: array
          minItems : 0
          maxItems : 1000
          items: 
            type: integer
          example: 
            -  11
            -  12

        banned: 
          description: List of ids of every user that this user banned
          type: array
          minItems : 0
          maxItems : 1000
          items: 
            type: integer
          example: 
            -  11
            -  12
              
        photos: 
          description: List of all the photos the user published
          type: array
          minItems : 0
          maxItems : 1000
          items: 
            $ref: '#/components/schemas/Photo'

        likes: 
          description: List of ids of every photo this user liked
          type: array
          minItems : 0
          maxItems : 100000
          items: 
            type: integer
          example: 
            -  11
            -  12

        comments:
          description: List of every comment this user made
          type: array
          minItems : 0
          maxItems : 1000
          items:
            $ref: '#/components/schemas/Comment'
    

    Photo:
      description: A photo uploaded by an user
      type: object
      properties:
        
        photoId:  
          description: Id of the photo
          type: integer
          format: int64
          example: 72
          readOnly: true
        
        profileId:
          description: Id of the user that published the photo
          type: integer
          format: int64
          example: 10
          readOnly: true

        image:
          description: The actual photo
          type: string
          format: binary
          minLength : 3
          maxLength : 400000000
          example: this contains the photo in binary 

        time:
          description: Time at which the photo ha been published
          type: string
          format: date-time
          example: 2022-12-23 19:24:49
          minLength : 10
          maxLength : 21
          readOnly: true

        likes:
          description: List of all the users ids that liked this photo
          type: array
          minItems : 0
          maxItems : 1000
          items: 
            type: integer
          example: 
            -  11
            -  12
          readOnly: true

        comments:
          description: List of every comment published on this photo
          type: array
          minItems : 0
          maxItems : 1000
          items:
            $ref: '#/components/schemas/Comment'
          readOnly: true
    

    Comment:
      description: A comment made by an user
      type: object
      properties:

        commentId:
          description: Id of this comment
          type: integer
          format: int64
          example: 3
          readOnly: true

        photoId:
          description: Id of the photo on which this comment has been published
          type: integer
          format: int64
          example: 72
          readOnly: true

        userId:
          description: Id of the user that published this comment
          type: integer
          format: int64
          example: 10

        comment:
          description: The actual comment
          type: string
          minLength : 1
          maxLength : 100
          example: This is a comment
          pattern: "^[a-zA-Z0-9 ]*$"
        
        time:
          description: Time at which the comment has been published
          type: string
          format: date-time
          example: 2022-12-23 19:24:49
          minLength : 10
          maxLength : 21
          readOnly: true


    Stream:
      description: Stream of photos. Rapresents the "home page" of an user
      type: object
      properties:

        photos:
          description: List of all the photo that rapresents the stream
          type: array
          minItems : 0
          maxItems : 100
          items: 
            $ref: '#/components/schemas/Photo'

  
  securitySchemes:
    Authentication:   
      description: Bearer authentication require a valid username  
      type: http
      scheme: bearer
      bearerFormat: JWT 
